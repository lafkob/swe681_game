/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ben' at '1/28/16 10:34 PM' with Gradle 2.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'


// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// Exclude commons-logging
configurations.all {
	exclude group: "commons-logging", module: "commons-logging"
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// double check these are all needed
	compile 'org.springframework:spring-core:4.2.4.RELEASE'
	compile 'org.springframework:spring-webmvc:4.2.4.RELEASE'
	compile 'org.springframework.security:spring-security-web:4.0.4.RELEASE'
	compile 'org.springframework.security:spring-security-config:4.0.4.RELEASE'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.7.3'
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // The production code uses the SLF4J logging API at compile time
    // Don't think we need this anymore
    //compile 'org.slf4j:slf4j-api:1.7.13'
    
    // Bridge logging from JCL to SLF4j
    compile 'org.slf4j:jcl-over-slf4j:1.7.19'
  	
  	// Logback
  	compile 'ch.qos.logback:logback-classic:1.1.6'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    
    testCompile 'org.springframework:spring-test:4.2.5.RELEASE'
}
